with open(0) as f:
    lines = f.read().splitlines()

def next_secret_number(secret_number: int) -> int:
    PRUNE_VALUE = 16777216
    secret_number = (secret_number * 64) ^ secret_number
    secret_number = secret_number % PRUNE_VALUE
    secret_number = (secret_number // 32) ^ secret_number
    secret_number = secret_number % PRUNE_VALUE
    secret_number = (secret_number * 2048) ^ secret_number
    secret_number = secret_number % PRUNE_VALUE
    return secret_number

def generate_secret_numbers(first: int, n: int=2000) -> list[int]:
    numbers = [first]
    for _ in range(n):
        numbers.append(next_secret_number(numbers[-1]))
    return numbers

def extract_changes_from_ones_digits(sequence):
    changes = []
    a = sequence[0]
    for b in sequence[1:]:
        changes.append((b%10, b%10-a%10))
        a = b
    return changes

def get_pattern_for_price(prices, expected):
    ...
    # get all positions of expected in prices[x][0]
    # return list of sequence before this positions



prices = extract_changes_from_ones_digits(generate_secret_numbers(1))

pat = [-2,1,-1,3]
print([(i, i+len(pat)) for i in range(len(prices)) if [x[1] for x in prices[i:i+len(pat)]] == pat])
print(prices[1963])